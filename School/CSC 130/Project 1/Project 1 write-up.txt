Warren Quattrocchi
CSC 130
Project 1 Write-up
1) Who and what did you find helpful for this project?
	My old project from CSC 20 helped me in making the stacks, but I had to convert it from an arraylist to an array/linked list. Also writing up the pseudocode and reading the lecture notes before attempting to implement helped save a lot of time during the coding.
2) How did you test that your stack implementations were correct?
	I converted the DAT files back into WAV files after running it though the program using sox to see if they played in the right order.
3) Other than java.util.EmptyStackException, did you use any classes from the Java framework or other class library? (You will get a low score on this project if you use a library to implement your stacks.)
	No
4) Your array stacks start with a small array and double in size if they  become  full.  For  a  .dat  file  with  1  million  lines,how  many times would this resizing occur? What about with 1 billion lines or 1 trillion lines (assuming the computer had enough memory)? Explain your answer.
	1 million: 17 times
	1 billlion: 27 times
	1 trillion: 37 times
		In order to find the number of times a number must be doubled you can plug it 			in to the equation [log2(target number/starting number)] and then round 			up.
5) Instead of a DStack interface, pretend you were given a fully-functional FIFO Queue class. How might you implement this project (i.e., simulate a Stack) with one or more instances of a FIFO Queue?
	You could simulate a stack by continuously dequeuing all the items in the queue until there is only 1 left, and then enqueuing the previously dequeued items.	
6) Write pseudocode for your push and pop operations. Assume your Queue class provides the operations enqueue, dequeue, isEmpty, and size.
	public void push (double d)
	{
		array[front + 1] = d
		front++
    	}
	public void pop()
	{
		if isEmpty
			throw new EmptyStackException
		double data = array[front]
		front--
		return data
     	}
7) Why would a stack implementation using a queue, as you described in the previous problem, be worse than your array andlinked-liststack implementations?
	The way a stack functions (LIFO) is set up perfectly for reversing, as you can simply push every element and then pop them all after to get the file in reverse order.